#!/usr/bin/perl
#
# work_queue_for_delete ... The number of active delete workers
# work_queue_for_fsck ... The number of active fsck workers
# work_queue_for_replicate ... The number of active replicate workers
#
use strict;
use warnings;
use IO::Socket;

if ( @ARGV and $ARGV[0] eq 'config' ) {
  print_config();
}
else {
  print_stat();
}

exit;

sub print_config {
    print <<"...";
graph_title    Mogilefs stats work queue
graph_vlabel   size of work_queue
graph_category mogilefs
work_queue_for_delete.label     work_queue_for_delete
work_queue_for_delete.colour    4444ff
work_queue_for_fsck.label       work_queue_for_fsck
work_queue_for_fsck.colour      ff0000
work_queue_for_replicate.label  work_queue_for_replicate
work_queue_for_replicate.colour ffff00
...
}

sub print_stat {
    my $host = $ENV{'host'} || '127.0.0.1';
    my $port = $ENV{'port'} || 7001;

    my $sock = IO::Socket::INET->new(
        PeerAddr => $host,
        PeerPort => $port,
        Proto    => 'tcp',
    );

    die $! unless $sock;

    print $sock "!stats\n";

    my %stats;
    while ( my $line = <$sock> ) {
        last if $line =~ /^\./;
        chomp $line;
        my @parts = split ' ', $line;
        $stats{$parts[0]} = $parts[1];
    }

    $sock->close;

    my @categories = qw(
        work_queue_for_delete
        work_queue_for_fsck
        work_queue_for_replicate
    );

    foreach my $category (@categories) {
        my $value = $stats{$category} || 0;
        print "${category}.value ${value}\n";
    }

}
