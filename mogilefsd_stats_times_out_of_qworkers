#!/usr/bin/perl
#
# times_out_of_qworkers ... The number of pending queries dispite issued the queues
#
# See also: lib/MogileFS/ProcManager.pm
#
# ```perl
# sub EnqueueCommandRequest {
#     my ($class, $line, $client) = @_;
#     push @PendingQueries, [
#                            $client,
#                            ($client->peer_ip_string || '0.0.0.0') . " $line"
#                            ];
#     MogileFS::ProcManager->ProcessQueues;
#     if (@PendingQueries) {
#         # Don't like the name. Feel free to change if you find better.
#         $Stats{times_out_of_qworkers}++;
#     }
# }
# ```
#
use strict;
use warnings;
use IO::Socket;

if ( @ARGV and $ARGV[0] eq 'config' ) {
  print_config();
}
else {
  print_stat();
}

exit;

sub print_config {
    print <<"...";
graph_title    Mogilefs stats times_out_of_qworkers
graph_vlabel   number of times out query workers
graph_category mogilefs
times_out_of_qworkers.label  times_out_of_qworkers
times_out_of_qworkers.colour ff0000
...
}

sub print_stat {
    my $host = $ENV{'host'} || '127.0.0.1';
    my $port = $ENV{'port'} || 7001;

    my $sock = IO::Socket::INET->new(
        PeerAddr => $host,
        PeerPort => $port,
        Proto    => 'tcp',
    );

    die $! unless $sock;

    print $sock "!stats\n";

    my %stats;
    while ( my $line = <$sock> ) {
        last if $line =~ /^\./;
        chomp $line;
        my @parts = split ' ', $line;
        $stats{$parts[0]} = $parts[1];
    }

    $sock->close;

    my $value = $stats{times_out_of_qworkers} || 0;
    print "times_out_of_qworkers.value ${value}\n";
}
